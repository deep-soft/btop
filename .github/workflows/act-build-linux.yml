# act-build-linux.yml
name: act- Linux

env:
   TAG_NAME:      "btop"
   TAG_VERSION:   "v1.1.0"
   TAG_BUILD:     "-b"
   TAG_REF:       "0000000"
   TAG_SHA:       "0000000"
   PROG_NAME:     "btop"
   PROG_VERSION:  "v1.1.0"
   VERSION:       "1.1.0"
   DRAFT:         true
   INFO_FILE:     "_info_.txt"

on:
  workflow_dispatch:
    inputs:
      # if: ${{ inputs.ZIP_ALL }}
      ZIP_ALL:
        description: ZIP ALL
        type: boolean
        required: true
        default: false

#  push:
#    branches:
#      - main
#    tags-ignore:
#      - '*.*'
#    paths:
#      - 'src/**'
#      - '!src/osx/**'
#      - '!src/freebsd/**'
#      - '!src/netbsd/**'
#      - '!src/openbsd/**'
#      - 'include/**'
#      - 'Makefile'
#      - '.github/workflows/continuous-build-linux.yml'
#  pull_request:
#    branches:
#      - main
#    paths:
#      - 'src/**'
#      - '!src/osx/**'
#      - '!src/freebsd/**'
#      - '!src/netbsd/**'
#      - '!src/openbsd/**'
#      - 'include/**'
#      - 'Makefile'
#      - '.github/workflows/continuous-build-linux.yml'

jobs:
  static-build:
    continue-on-error: true
    strategy:
      matrix:
        toolchain:
          - aarch64-linux-musl
#          - aarch64_be-linux-musl
#          - arm-linux-musleabi
#          - arm-linux-musleabihf
#          - armeb-linux-musleabi
#          - armeb-linux-musleabihf
#          - armel-linux-musleabi
#          - armel-linux-musleabihf
#          - armv5l-linux-musleabi
#          - armv5l-linux-musleabihf
#          - armv6-linux-musleabi
#          - armv6-linux-musleabihf
#          - armv7l-linux-musleabihf
          - armv7m-linux-musleabi
#          - armv7r-linux-musleabihf
#          - i486-linux-musl
#          - i686-linux-musl
#          - m68k-linux-musl
#          - mips-linux-musl
#          - mips-linux-musln32sf
#          - mips-linux-muslsf
#          - mips64-linux-musl
#          - mips64-linux-musln32
#          - mips64-linux-musln32sf
#          - mips64el-linux-musl
#          - mips64el-linux-musln32
#          - mips64el-linux-musln32sf
#          - mipsel-linux-musl
#          - mipsel-linux-musln32
#          - mipsel-linux-musln32sf
#          - mipsel-linux-muslsf
#          - powerpc-linux-musl
#          - powerpc-linux-muslsf
#          - powerpc64-linux-musl
#          - powerpc64le-linux-musl
#          - powerpcle-linux-musl
#          - powerpcle-linux-muslsf
#          - riscv32-linux-musl
#          - riscv64-linux-musl
#          - s390x-linux-musl
          - x86_64-linux-musl
#          - x86_64-linux-muslx32

    # - or1k-linux-musl
    # - sh2-linux-musl
    # - sh2-linux-muslfdpic
    # - sh2eb-linux-musl
    # - sh2eb-linux-muslfdpic
    # - sh4-linux-musl
    # - sh4eb-linux-musl

    runs-on: ubuntu-latest
    container: muslcc/x86_64:${{ matrix.toolchain }}

    steps:
      - name: Install build tools
        continue-on-error: true
        run: |
          apk add --no-cache coreutils git make tar zstd bash zip findutils
          cat /etc/shells
          apk add lowdown --repository=https://dl-cdn.alpinelinux.org/alpine/v3.15/community

      - name: Fix - Unsafe repository stop
        run: |
          git config --global --add safe.directory /__w/btop/btop

      - name: Checkout source
        uses: deep-soft/checkout@v4
        with:
          submodules: recursive

      - name: set program version variable
        shell: bash
        run: |
          _version_=$(grep "const string Version"  ./src/btop.cpp | awk -F "=" '{print $2}' | tr -d '"' | tr -d ';' | tr -d ' ')
          echo "PROG_VERSION=v$_version_" >> $GITHUB_ENV

      - name: print program version
        shell: bash
        run: |
          echo "PROG_VERSION=${{ env.PROG_VERSION }}"

      - name: get SHA and version
        shell: bash
        run: |
          _sha_=$(git log -1 --format='%H')
          _date_=$(date +%Y%m%d)
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV

          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _sha_short_=$(echo ${_sha_::$_ref_len_})

          echo "TAG_REF=$_sha_short_" >> $GITHUB_ENV
          echo "TAG_SHA=$_sha_short_" >> $GITHUB_ENV

          _version_=$(grep "const string Version" ./src/btop.cpp | awk -F "=" '{print $2}' | tr -d '"' | tr -d ';' | tr -d ' ')
          echo "VERSION=$_version_" >> $GITHUB_ENV
          echo "PROG_VERSION=v$_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=v$_version_" >> $GITHUB_ENV
          _build_=${{ env.TAG_BUILD }}-$_date_-$_sha_short_

          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV

      - name: set INFO_FILE name
        shell: bash
        run: |
          echo "INFO_FILE=${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}-${{ env.TAG_BUILD }}-${{ matrix.toolchain }}" >> $GITHUB_ENV

      - name: write info to file ${{ env.INFO_FILE }}
        shell: bash
        run: |
          echo "TAG_NAME:     " ${{ env.TAG_NAME     }} >> ${{ env.INFO_FILE }}
          echo "TAG_VERSION:  " ${{ env.TAG_VERSION  }} >> ${{ env.INFO_FILE }}
          echo "TAG_BUILD:    " ${{ env.TAG_BUILD    }} >> ${{ env.INFO_FILE }}
          echo "TAG_REF:      " ${{ env.TAG_REF      }} >> ${{ env.INFO_FILE }}
          echo "TAG_SHA:      " ${{ env.TAG_SHA      }} >> ${{ env.INFO_FILE }}
          echo "PROG_NAME:    " ${{ env.PROG_NAME    }} >> ${{ env.INFO_FILE }}
          echo "PROG_VERSION: " ${{ env.PROG_VERSION }} >> ${{ env.INFO_FILE }}

      - name: Fix - Stopping at filesystem boundary
        run: |
          git init # [fix Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).]

      - name: Build
        run: |
          make STATIC=true STRIP=true

      - name: Make executable
        run: |
          chmod +x bin/*

      - name: Set up directories
        run: |
          mkdir .artifacts
          mkdir .package

      - name: Create binary atrifacts
        run: |
          TOOLCHAIN=${{ matrix.toolchain }}
          GIT_HASH=$(git rev-parse --short "${{ github.sha }}")
          FILENAME=btop-${TOOLCHAIN/linux-musl/}-$GIT_HASH
          cp bin/btop .artifacts/$FILENAME

      - name: Upload artifacts
        uses: deep-soft/upload-artifact@v4
        with:
          name: btop-${{ matrix.toolchain }}
          path: '.artifacts/**'

      - name: make install
        run: |
          mkdir ${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}-${{ env.TAG_BUILD }}-${{ matrix.toolchain }}
          make install ${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}-${{ env.TAG_BUILD }}-${{ matrix.toolchain }}

      - name: Archive - ZIP_ALL
        if: ${{ inputs.ZIP_ALL }}
        uses: deep-soft/zip-release@v2.1
        with:
          type: 'zip'
          filename: '${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}-${{ env.TAG_BUILD }}-${{ matrix.toolchain }}-ALL'
          directory: ${{ github.workspace }}
          path: '.'
          env_variable: ZIP_ALL
          # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: Publish - ZIP_ALL
        if: ${{ inputs.ZIP_ALL }}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: ${{ env.DRAFT }}
          tag_name: ${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}-ALL
          files: |
            ${{ env.ZIP_ALL }}
            ${{ env.INFO_FILE }}
