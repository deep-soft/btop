# act-build-linux-gpu.yml
name: act- Linux - GPU

env:
   TAG_NAME:      "btopg"
   TAG_VERSION:   "v1.1.0"
   TAG_BUILD:     "-b"
   TAG_REF:       "0000000"
   TAG_SHA:       "0000000"
   PROG_NAME:     "btopg"
   PROG_VERSION:  "v1.1.0"
   VERSION:       "1.1.0"
   DRAFT:         true
   INFO_FILE:     "_info_.txt"
   PREFIX:        "/usr/local"

on:
  workflow_dispatch:
    inputs:
      # if: ${{ inputs.ZIP_ALL }}
      ZIP_ALL:
        description: ZIP ALL
        type: boolean
        required: true
        default: false

jobs:
  gpu_build_linux:
    runs-on: ubuntu-latest
    container: alpine:edge
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout source
        uses: deep-soft/checkout@v4

      - name: Install build tools
        run: |
          apk add --no-cache --update gcc g++ make linux-headers
          apk add --no-cache coreutils git make tar zstd bash zip findutils
          apk add --no-cache lowdown
          cat /etc/shells
          # apk add lowdown --repository=https://dl-cdn.alpinelinux.org/alpine/v3.15/community

      - name: set program version variable
        shell: bash
        run: |
          _version_=$(grep "const string Version"  ./src/btop.cpp | awk -F "=" '{print $2}' | tr -d '"' | tr -d ';' | tr -d ' ')
          echo "PROG_VERSION=v$_version_" >> $GITHUB_ENV

      - name: print program version
        shell: bash
        run: |
          echo "PROG_VERSION=${{ env.PROG_VERSION }}"

      - name: get SHA and version
        shell: bash
        run: |
          _sha_=$(git log -1 --format='%H')
          _date_=$(date +%Y%m%d_%H%M)
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV

          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _sha_short_=$(echo ${_sha_::$_ref_len_})

          echo "TAG_REF=$_sha_short_" >> $GITHUB_ENV
          echo "TAG_SHA=$_sha_short_" >> $GITHUB_ENV

          _version_=$(grep "const string Version" ./src/btop.cpp | awk -F "=" '{print $2}' | tr -d '"' | tr -d ';' | tr -d ' ')
          echo "VERSION=$_version_" >> $GITHUB_ENV
          echo "PROG_VERSION=v$_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=v$_version_" >> $GITHUB_ENV
          _build_=${{ env.TAG_BUILD }}-$_date_-$_sha_short_

          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV

      - name: set INFO_FILE name
        shell: bash
        run: |
          INSTALL_FOLDER=${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}-${{ env.TAG_BUILD }}-${{ matrix.toolchain }};
          echo "INSTALL_FOLDER=$INSTALL_FOLDER" >> $GITHUB_ENV
          echo "INFO_FILE=$INSTALL_FOLDER.txt" >> $GITHUB_ENV

      - name: write info to file ${{ env.INFO_FILE }}
        shell: bash
        run: |
          echo "TAG_NAME:     " ${{ env.TAG_NAME     }} >> ${{ env.INFO_FILE }}
          echo "TAG_VERSION:  " ${{ env.TAG_VERSION  }} >> ${{ env.INFO_FILE }}
          echo "TAG_BUILD:    " ${{ env.TAG_BUILD    }} >> ${{ env.INFO_FILE }}
          echo "TAG_REF:      " ${{ env.TAG_REF      }} >> ${{ env.INFO_FILE }}
          echo "TAG_SHA:      " ${{ env.TAG_SHA      }} >> ${{ env.INFO_FILE }}
          echo "PROG_NAME:    " ${{ env.PROG_NAME    }} >> ${{ env.INFO_FILE }}
          echo "PROG_VERSION: " ${{ env.PROG_VERSION }} >> ${{ env.INFO_FILE }}

      - name: Build
        continue-on-error: true
        shell: bash
        run: |
          make CXX=g++ GPU_SUPPORT=true

      - name: Make executable
        continue-on-error: true
        shell: bash
        run: |
          chmod +x bin/*

      - name: make install
        continue-on-error: true
        shell: bash
        run: |
          mkdir -p ${{ env.INSTALL_FOLDER }} || true;
          make prefix=${{ env.PREFIX }} DESTDIR=${{ env.INSTALL_FOLDER }} install;
          cp ${{ env.INFO_FILE }} ${{ env.INSTALL_FOLDER }}${{ env.PREFIX }}/bin/${{ env.PROG_NAME }}.txt

      - name: Archive - ZIP_ARC
        uses: deep-soft/zip-release@v2.1
        with:
          type: 'zip'
          filename: '${{ github.workspace }}/${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}-${{ env.TAG_BUILD }}-${{ matrix.toolchain }}'
          directory: ${{ env.INSTALL_FOLDER }}
          path: '.'
          env_variable: ZIP_ARC
          # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: Publish - ZIP_ARC
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: ${{ env.DRAFT }}
          tag_name: ${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}
          files: |
            ${{ env.ZIP_ARC }}
            ${{ env.INFO_FILE }}

# Archive - ZIP_ALL begin
      - name: Archive - ZIP_ALL
        if: ${{ inputs.ZIP_ALL }}
        uses: deep-soft/zip-release@v2.1
        with:
          type: 'zip'
          filename: '${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}-${{ env.TAG_BUILD }}-${{ matrix.toolchain }}-ALL'
          directory: ${{ github.workspace }}
          path: '.'
          env_variable: ZIP_ALL
          # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: Publish - ZIP_ALL
        if: ${{ inputs.ZIP_ALL }}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: ${{ env.DRAFT }}
          tag_name: ${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}-ALL
          files: |
            ${{ env.ZIP_ALL }}
            ${{ env.INFO_FILE }}
# Archive - ZIP_ALL end
